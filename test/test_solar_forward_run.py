import numpy as np
import pyPCRTM

import expected_solar_data

def setup_test_forward_bt(
           output_jacob_flag=True,
           output_tr_flag=True,
           output_ch_flag=True,
           output_jacob_ch_flag=True,
           output_bt_flag=True,
           output_jacob_bt_flag=True):

    F = pyPCRTM.PCRTM_SOLAR()

    # this is the only sensor config for which we have the
    # pre-computed data for PCRTM-SOLAR.
    sensor_id = 26

    F.init(sensor_id,
           output_jacob_flag=output_jacob_flag,
           output_tr_flag=output_tr_flag,
           output_ch_flag=output_ch_flag,
           output_jacob_ch_flag=output_jacob_ch_flag,
           output_bt_flag=output_bt_flag,
           output_jacob_bt_flag=output_jacob_bt_flag)

    F.psfc = 1003.25
    F.pobs = 0.005
    F.sensor_zen = 60.0
    F.emis = 0.98 + np.zeros(F.num_monofreq, np.float32)
    
    F.tskin = 280.2328

    F.sensor_azi = 45.0
    F.solar_azi = 135.0
    F.solar_zen =  45.0

    F.tlev = np.array([
        244.9060, 244.1040, 243.3020, 242.4990, 241.6970, 240.8940,
        240.0920, 239.2900, 238.4870, 237.6850, 236.8820, 236.0800,
        235.2780, 234.4750, 233.6730, 232.8710, 232.0680, 231.2660,
        230.4630, 229.6610, 228.8590, 228.0560, 228.8590, 229.2850,
        228.2540, 225.6820, 221.4860, 221.6600, 221.9440, 221.9880,
        221.3320, 222.3310, 223.3460, 223.6510, 223.1320, 222.2880,
        222.6690, 223.1090, 223.6850, 224.2490, 224.7750, 225.4040,
        226.1680, 226.7140, 226.8060, 227.0270, 227.8810, 228.7720,
        229.0290, 229.1910, 229.2950, 229.3200, 229.3450, 229.6390,
        229.9820, 230.2680, 230.2110, 230.1520, 229.9770, 229.5300,
        229.0680, 228.4830, 227.6310, 226.7540, 226.0520, 225.9280,
        225.8010, 225.8680, 227.2620, 228.6920, 230.1580, 232.3870,
        234.7190, 237.1080, 239.3530, 241.5490, 243.7940, 245.9280,
        247.7470, 249.6040, 251.5000, 253.3050, 255.1260, 256.9820,
        259.0720, 261.6130, 263.9340, 265.8630, 267.7380, 269.5590,
        271.3690, 273.1900, 275.6400, 277.8860, 280.1420, 282.1120,
        282.5560, 282.5560, 282.5560, 282.5560, 282.5560], np.float32)

    # should be g/kg
    F.h2o = np.array([
        4.2182E-02, 2.6151E-02, 2.2524E-02, 2.2139E-02, 2.2345E-02,
        2.1894E-02, 2.1623E-02, 2.0854E-02, 2.0422E-02, 1.9576E-02,
        1.8417E-02, 1.7787E-02, 1.6155E-02, 1.3795E-02, 1.2450E-02,
        1.3948E-02, 1.5837E-02, 1.5586E-02, 1.5951E-02, 1.6268E-02,
        1.5790E-02, 1.5482E-02, 1.3982E-02, 1.3760E-02, 1.5218E-02,
        1.5569E-02, 1.5696E-02, 1.4402E-02, 1.2950E-02, 1.3685E-02,
        1.4499E-02, 1.5925E-02, 1.7751E-02, 2.0542E-02, 2.3787E-02,
        2.1738E-02, 1.7409E-02, 1.5898E-02, 1.5140E-02, 1.4623E-02,
        1.4310E-02, 1.4690E-02, 1.5542E-02, 1.4859E-02, 1.3726E-02,
        1.3666E-02, 1.4956E-02, 1.7152E-02, 1.7536E-02, 1.6355E-02,
        1.6518E-02, 1.7713E-02, 1.8739E-02, 1.8942E-02, 1.8081E-02,
        1.6543E-02, 1.4920E-02, 1.3428E-02, 1.1879E-02, 1.0634E-02,
        1.0031E-02, 1.0159E-02, 1.0963E-02, 1.2298E-02, 1.4296E-02,
        1.7021E-02, 2.0060E-02, 2.4400E-02, 2.9309E-02, 3.4971E-02,
        4.2521E-02, 5.1390E-02, 6.0523E-02, 6.9593E-02, 7.8412E-02,
        9.0472E-02, 1.0716E-01, 1.2449E-01, 1.4190E-01, 1.6041E-01,
        1.7975E-01, 1.9943E-01, 2.1969E-01, 2.4244E-01, 2.6854E-01,
        2.9241E-01, 3.1308E-01, 3.3339E-01, 3.4780E-01, 3.5535E-01,
        3.6090E-01, 3.5545E-01, 3.3951E-01, 3.1184E-01, 2.5703E-01,
        1.9019E-01, 1.5817E-01, 1.5818E-01, 1.5819E-01, 1.5818E-01,
        1.5837E-01], np.float32)

    # ppm
    F.co2 = np.array([
        363.5187, 363.5187, 363.5187, 363.5187, 363.5187,
        363.5312, 363.5702, 363.6875, 363.8089, 363.9016,
        363.9719, 364.0410, 364.0981, 364.1384, 364.1780,
        364.2169, 364.3329, 364.5038, 364.6715, 364.8359,
        364.9962, 365.1496, 365.2998, 365.4469, 365.5909,
        365.6422, 365.6590, 365.6754, 365.6914, 365.7214,
        365.7626, 365.8028, 365.8419, 365.9814, 366.1763,
        366.3661, 366.5508, 366.7858, 367.0166, 367.2409,
        367.4904, 367.7629, 368.0271, 368.3109, 368.6626,
        369.0027, 369.3418, 369.7074, 370.0602, 370.4013,
        370.7320, 371.0502, 371.3610, 371.6623, 371.9639,
        372.4423, 372.9003, 373.5883, 374.3813, 375.0573,
        375.5598, 376.0378, 376.4460, 376.6990, 376.9385,
        377.1650, 377.3794, 377.5828, 377.7740, 377.9535,
        378.1273, 378.2934, 378.4482, 378.5996, 378.7636,
        378.9151, 379.0546, 379.1853, 379.3575, 379.5143,
        379.6564, 379.7847, 379.8999, 380.1389, 380.3916,
        380.6143, 380.8089, 381.0880, 381.6050, 382.0438,
        382.4115, 383.0423, 383.8282, 384.4527, 384.9500,
        385.3369, 385.6151, 385.7570, 385.8480, 385.8480,
        385.8480], np.float32)

    # ppm
    F.o3 = np.array([
        8.6452E-22, 8.6452E-22, 3.3960E-11, 2.3297E-05, 4.6952E-02,
        1.2793E+00, 1.8121E+00, 1.5202E+00, 3.1297E+00, 4.6868E+00,
        5.1449E+00, 5.2322E+00, 5.4805E+00, 5.7759E+00, 5.9370E+00,
        5.9466E+00, 5.8742E+00, 5.7931E+00, 5.7210E+00, 5.6622E+00,
        5.6172E+00, 5.5859E+00, 5.5690E+00, 5.5664E+00, 5.5592E+00,
        5.4988E+00, 5.3514E+00, 5.1132E+00, 4.7877E+00, 4.3794E+00,
        3.9149E+00, 3.4640E+00, 3.0754E+00, 2.7504E+00, 2.4822E+00,
        2.2632E+00, 2.0876E+00, 1.9488E+00, 1.8320E+00, 1.7191E+00,
        1.6018E+00, 1.4816E+00, 1.3596E+00, 1.2356E+00, 1.1114E+00,
        9.8725E-01, 8.6409E-01, 7.4323E-01, 6.3123E-01, 5.3467E-01,
        4.5377E-01, 3.8595E-01, 3.2980E-01, 2.8321E-01, 2.4495E-01,
        2.1405E-01, 1.8918E-01, 1.6952E-01, 1.5429E-01, 1.4264E-01,
        1.3345E-01, 1.2534E-01, 1.1784E-01, 1.1066E-01, 1.0373E-01,
        9.7464E-02, 9.1327E-02, 8.5426E-02, 7.9965E-02, 7.4751E-02,
        6.9731E-02, 6.5012E-02, 6.0571E-02, 5.6287E-02, 5.2024E-02,
        4.8087E-02, 4.4437E-02, 4.0865E-02, 3.7342E-02, 3.4098E-02,
        3.0966E-02, 2.7877E-02, 2.5101E-02, 2.2289E-02, 1.9574E-02,
        1.7010E-02, 1.4665E-02, 1.2269E-02, 9.9528E-03, 7.8939E-03,
        5.7197E-03, 3.7334E-03, 1.7496E-03, 6.3172E-04, 2.8247E-04,
        1.1150E-04, 5.4460E-05, 5.4607E-05, 5.2929E-05, 0.0000E+00,
        0.0000E+00], np.float32)

    # ppm
    F.n2o = np.array([
        1.0940E-04, 1.4211E-04, 2.0891E-04, 3.0890E-04, 4.0362E-04,
        4.9747E-04, 5.4515E-04, 5.7810E-04, 5.9339E-04, 6.3985E-04,
        8.3545E-04, 1.1641E-03, 1.5052E-03, 1.7441E-03, 1.8774E-03,
        1.9921E-03, 2.0930E-03, 2.2095E-03, 2.3661E-03, 2.5988E-03,
        2.8556E-03, 3.1843E-03, 3.7487E-03, 5.0795E-03, 7.0230E-03,
        1.1365E-02, 1.7546E-02, 2.6933E-02, 3.8778E-02, 5.2639E-02,
        6.8569E-02, 8.5894E-02, 1.0431E-01, 1.2393E-01, 1.4152E-01,
        1.6010E-01, 1.7497E-01, 1.9052E-01, 2.0179E-01, 2.1305E-01,
        2.2369E-01, 2.3448E-01, 2.4457E-01, 2.5434E-01, 2.6319E-01,
        2.6992E-01, 2.7695E-01, 2.8183E-01, 2.8675E-01, 2.9113E-01,
        2.9444E-01, 2.9787E-01, 3.0032E-01, 3.0230E-01, 3.0434E-01,
        3.0573E-01, 3.0697E-01, 3.0825E-01, 3.0921E-01, 2.9705E-01,
        3.0864E-01, 3.1982E-01, 3.1482E-01, 3.0030E-01, 3.1977E-01,
        3.2718E-01, 3.2113E-01, 3.2503E-01, 3.2076E-01, 3.1124E-01,
        3.1376E-01, 3.1814E-01, 3.2711E-01, 3.0301E-01, 3.0637E-01,
        3.0329E-01, 3.1982E-01, 3.2701E-01, 3.1335E-01, 3.2132E-01,
        3.1009E-01, 3.1746E-01, 3.1435E-01, 3.1964E-01, 3.0253E-01,
        3.0242E-01, 3.0021E-01, 3.1795E-01, 3.2329E-01, 3.0075E-01,
        3.0867E-01, 3.0852E-01, 3.0830E-01, 3.2395E-01, 3.1714E-01,
        3.2099E-01, 3.2697E-01, 3.0389E-01, 3.1763E-01, 3.1489E-01,
        3.0853E-01], np.float32)

    # ppm
    F.co = np.array([
        4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02,
        4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02,
        4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02,
        4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02,
        4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02,
        4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02,
        4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02,
        4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02, 4.2239E-02,
        4.2239E-02, 4.2239E-02, 4.2253E-02, 4.2291E-02, 4.2366E-02,
        4.2492E-02, 4.2691E-02, 4.2987E-02, 4.3407E-02, 4.3978E-02,
        4.4738E-02, 4.5713E-02, 4.6933E-02, 4.8405E-02, 5.0122E-02,
        5.2066E-02, 5.4222E-02, 5.6581E-02, 5.9133E-02, 6.1829E-02,
        6.4596E-02, 6.7360E-02, 7.0086E-02, 7.2749E-02, 7.5311E-02,
        7.7702E-02, 7.9842E-02, 8.1682E-02, 8.3178E-02, 8.4280E-02,
        8.4970E-02, 8.5232E-02, 8.5034E-02, 8.4361E-02, 8.3272E-02,
        8.1899E-02, 8.0316E-02, 7.8614E-02, 7.6877E-02, 7.5151E-02,
        7.3461E-02, 7.1885E-02, 7.0510E-02, 6.9353E-02, 6.8352E-02,
        6.7484E-02, 6.6763E-02, 6.6218E-02, 6.5908E-02, 6.5843E-02,
        6.6050E-02, 6.6033E-02, 6.7196E-02, 6.9507E-02, 7.2385E-02,
        7.5103E-02, 7.7279E-02, 7.8414E-02, 7.8571E-02, 7.8530E-02,
        7.8530E-02 ], np.float32)

    # ppm
    F.ch4 = np.array([
        2.8054E-02, 5.9711E-02, 1.2478E-01, 1.9952E-01, 2.3767E-01,
        2.5807E-01, 2.6910E-01, 2.7917E-01, 2.8537E-01, 2.9144E-01,
        3.0148E-01, 3.1228E-01, 3.2129E-01, 3.2810E-01, 3.3220E-01,
        3.3315E-01, 3.3026E-01, 3.2483E-01, 3.1810E-01, 3.1177E-01,
        3.0563E-01, 3.0137E-01, 3.0591E-01, 3.2537E-01, 3.5577E-01,
        4.1305E-01, 4.8083E-01, 5.6445E-01, 6.5112E-01, 7.4209E-01,
        8.2509E-01, 9.1022E-01, 9.8437E-01, 1.0619E+00, 1.1231E+00,
        1.1875E+00, 1.2369E+00, 1.2883E+00, 1.3257E+00, 1.3629E+00,
        1.3989E+00, 1.4357E+00, 1.4713E+00, 1.5066E+00, 1.5392E+00,
        1.5651E+00, 1.5922E+00, 1.6120E+00, 1.6321E+00, 1.6502E+00,
        1.6646E+00, 1.6796E+00, 1.6908E+00, 1.7002E+00, 1.7100E+00,
        1.7176E+00, 1.7248E+00, 1.7322E+00, 1.7389E+00, 1.7454E+00,
        1.7522E+00, 1.7583E+00, 1.7636E+00, 1.7692E+00, 1.7748E+00,
        1.7796E+00, 1.7846E+00, 1.7896E+00, 1.7943E+00, 1.7982E+00,
        1.8022E+00, 1.8063E+00, 1.8096E+00, 1.8121E+00, 1.8145E+00,
        1.8170E+00, 1.8192E+00, 1.8205E+00, 1.8218E+00, 1.8231E+00,
        1.8244E+00, 1.8255E+00, 1.8264E+00, 1.8274E+00, 1.8284E+00,
        1.8293E+00, 1.8299E+00, 1.8306E+00, 1.8312E+00, 1.8323E+00,
        1.8336E+00, 1.8350E+00, 1.8368E+00, 1.8391E+00, 1.8414E+00,
        1.8426E+00, 1.8431E+00, 1.8431E+00, 1.8431E+00, 1.8431E+00,
        1.8431E+00 ], np.float32)

    return F


def test_forward_bt():
    F = setup_test_forward_bt()
    dat = F.forward_rt()
    assert np.allclose(dat['bt'], expected_solar_data.expected_BT_v00), \
        'forward computed BT spectrum did not match stored result'
    for v in dat:
        assert np.all(np.isfinite(dat[v])), \
            f'non finite values detected in {v}'


if __name__ == "__main__":
    test_forward_bt()
    print("Success!")
